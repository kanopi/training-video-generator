#!/bin/bash
# Automated Recording Wrapper for: {{TOPIC}}
# Generated by Training Video Generator
#
# This script orchestrates screen recording + automation for perfect A/V sync

set -e

# Configuration
TOPIC="{{TOPIC}}"
RECORDING_DIR="recordings"
OUTPUT_VIDEO="$RECORDING_DIR/${TOPIC}.mov"
AUTOMATION_SCRIPT="scripts/automation/${TOPIC}-automate.scpt"

# FFmpeg screen recording settings
FRAME_RATE="30"           # FPS
VIDEO_QUALITY="18"        # CRF (lower = better quality, 18-23 recommended)
PRESET="ultrafast"        # Encoding preset during recording
DISPLAY_ID="1"            # Main display (1 = primary, 2 = secondary, etc.)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Ensure directories exist
mkdir -p "$RECORDING_DIR"

echo -e "${BLUE}üé¨ Training Video Recording Script${NC}"
echo -e "Topic: ${GREEN}{{TOPIC}}${NC}"
echo -e "Duration: ${YELLOW}{{DURATION}} minutes${NC}"
echo ""

# Verify automation script exists
if [ ! -f "$AUTOMATION_SCRIPT" ]; then
    echo -e "${RED}‚ùå Error: Automation script not found: $AUTOMATION_SCRIPT${NC}"
    echo "Run /video-automate first to generate the automation script."
    exit 1
fi

# Check for FFmpeg
if ! command -v ffmpeg &> /dev/null; then
    echo -e "${RED}‚ùå Error: FFmpeg not found${NC}"
    echo "Install with: brew install ffmpeg"
    exit 1
fi

# Pre-recording checklist
echo -e "${YELLOW}üìã Pre-recording checklist:${NC}"
echo "  ‚úì Clean terminal environment"
echo "  ‚úì Hide personal information"
echo "  ‚úì Close unnecessary applications"
echo "  ‚úì Prepare any required files/windows"
echo "  ‚úì Position terminal window for recording"
echo ""

# Confirm ready
read -p "Ready to start automated recording? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${RED}‚ùå Cancelled${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}üöÄ Starting automated recording in 3 seconds...${NC}"
echo "   (Position your windows now!)"
sleep 1
echo "   3..."
sleep 1
echo "   2..."
sleep 1
echo "   1..."
sleep 1

# Start screen recording in background using FFmpeg
echo -e "${BLUE}üìπ Starting screen recording...${NC}"

# macOS: Use avfoundation to capture screen
# Crops to 1920x1080 area at top-left (where AppleScript positions iTerm2)
# This matches the window size set in the automation script
ffmpeg -f avfoundation -capture_cursor 1 -capture_mouse_clicks 1 \
       -i "$DISPLAY_ID:none" \
       -r "$FRAME_RATE" \
       -c:v libx264 \
       -crf "$VIDEO_QUALITY" \
       -preset "$PRESET" \
       -pix_fmt yuv420p \
       -vf "crop=1920:1080:0:0" \
       "$OUTPUT_VIDEO" \
       -loglevel error -stats \
       > /dev/null 2>&1 &

FFMPEG_PID=$!

# Verify FFmpeg started
sleep 2
if ! ps -p $FFMPEG_PID > /dev/null; then
    echo -e "${RED}‚ùå Error: Screen recording failed to start${NC}"
    echo "Check FFmpeg installation and screen recording permissions."
    echo "Grant permission: System Settings > Privacy & Security > Screen Recording"
    exit 1
fi

echo -e "${GREEN}‚úì Recording started (PID: $FFMPEG_PID)${NC}"
echo ""

# Small buffer to ensure recording is stable
sleep 1

# Run the AppleScript automation
echo -e "${BLUE}ü§ñ Running automation script...${NC}"
if osascript "$AUTOMATION_SCRIPT"; then
    echo -e "${GREEN}‚úì Automation complete!${NC}"
else
    echo -e "${RED}‚ùå Automation script failed${NC}"
    # Stop recording even if automation failed
    kill -INT $FFMPEG_PID 2>/dev/null || true
    exit 1
fi

# Add 1 second buffer at end
echo -e "${BLUE}‚è∏Ô∏è  Finalizing recording...${NC}"
sleep 1

# Stop screen recording gracefully
echo -e "${BLUE}‚èπÔ∏è  Stopping screen recording...${NC}"
kill -INT $FFMPEG_PID

# Wait for FFmpeg to finish encoding
wait $FFMPEG_PID 2>/dev/null || true

echo ""
echo -e "${GREEN}‚úÖ Recording complete!${NC}"
echo ""

# Verify output file exists and show info
if [ -f "$OUTPUT_VIDEO" ]; then
    FILE_SIZE=$(du -h "$OUTPUT_VIDEO" | cut -f1)
    echo -e "${GREEN}üìä Video Information:${NC}"
    echo "  File: $OUTPUT_VIDEO"
    echo "  Size: $FILE_SIZE"

    # Show duration if ffprobe available
    if command -v ffprobe &> /dev/null; then
        DURATION=$(ffprobe -v error -show_entries format=duration \
                   -of default=noprint_wrappers=1:nokey=1 "$OUTPUT_VIDEO" \
                   2>/dev/null | cut -d. -f1)
        if [ -n "$DURATION" ]; then
            MINUTES=$((DURATION / 60))
            SECONDS=$((DURATION % 60))
            echo "  Duration: ${MINUTES}m ${SECONDS}s"
        fi
    fi

    echo ""
    echo -e "${BLUE}üìù Next steps:${NC}"
    echo "  1. Review the recording: open $OUTPUT_VIDEO"
    echo "  2. Generate audio: /video-narrate"
    echo "  3. Merge video + audio: /video-merge"
else
    echo -e "${RED}‚ùå Error: Recording file not found at $OUTPUT_VIDEO${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}üéâ Recording saved successfully!${NC}"
